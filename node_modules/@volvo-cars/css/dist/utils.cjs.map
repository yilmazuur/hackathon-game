{"version":3,"sources":["../src/utils.ts","../src/join.ts","../src/merge.ts"],"sourcesContent":["import { cssJoin } from './join';\n\n/**\n * @deprecated Use `cssJoin` instead.\n */\nconst clsx = cssJoin;\nexport { cssJoin, clsx };\nexport { cssMerge } from './merge';\n","/*\nMIT License\n\nCopyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport type ClassValue =\n  | ClassArray\n  | string\n  | number\n  | bigint\n  | null\n  | boolean\n  | undefined;\n\ntype ClassArray = ClassValue[];\n\nfunction toVal(mix: NonNullable<ClassValue>) {\n  let i: number;\n  let y: string;\n  let str = '';\n\n  if (\n    typeof mix === 'string' ||\n    typeof mix === 'number' ||\n    typeof mix === 'bigint'\n  ) {\n    str += mix;\n  } else if (Array.isArray(mix)) {\n    for (i = 0; i < mix.length; ++i) {\n      if (mix[i]) {\n        // biome-ignore lint/style/noNonNullAssertion: checked in the previous branch\n        // biome-ignore lint/suspicious/noAssignInExpressions: micro-optimization\n        if ((y = toVal(mix[i]!))) {\n          // biome-ignore lint/suspicious/noAssignInExpressions: micro-optimization\n          str && (str += ' '); // eslint-disable-line @typescript-eslint/no-unused-expressions\n          str += y;\n        }\n      }\n    }\n  }\n\n  return str;\n}\n\n/**\n * Conditionally join strings of class names together, filtering out falsy values.\n *\n * @example\n * cssJoin('bg-secondary', variant === 'primary' && 'text-primary')\n *\n * @param classes\n */\nexport function cssJoin(...classes: ClassValue[]) {\n  let x: string;\n  let str = '';\n\n  for (let i = 0; i < classes.length; ++i) {\n    if (classes[i]) {\n      // biome-ignore lint/style/noNonNullAssertion: checked in the previous branch\n      // biome-ignore lint/suspicious/noAssignInExpressions: micro-optimization\n      if ((x = toVal(classes[i]!))) {\n        // biome-ignore lint/suspicious/noAssignInExpressions: micro-optimization\n        str && (str += ' '); // eslint-disable-line @typescript-eslint/no-unused-expressions\n        str += x;\n      }\n    }\n  }\n\n  return str;\n}\n","import { type ClassValue, cssJoin } from './join';\n\nconst SPLIT_CLASSES_REGEX = /\\s+/;\n\n/**\n * Class group matches with classes that should override each other.\n *\n * The keys are just arbitrary names and not neccesarily part of the actual class name.\n */\nconst classGroupMatchers = new Map([\n  // Key + alphanumeric value\n  ...['scale', 'stack', 'top', 'end', 'bottom', 'start'].map((name) => {\n    return [name, new RegExp(`^${name}-[\\\\w\\\\d\\\\/]+$`)] as const;\n  }),\n\n  // Key + optional numeric value\n  ...[\n    'h',\n    'w',\n    'grid-cols',\n    'border',\n    'border-ring',\n    'border-x',\n    'border-y',\n    'border-r',\n    'border-l',\n    'border-t',\n    'border-b',\n  ].map((name) => {\n    return [name, new RegExp(`^${name}(-\\\\d+)?$`)] as const;\n  }),\n\n  // Key + optional single word value\n  ...['rounded', 'rounded-t', 'rounded-e', 'rounded-b', 'rounded-s'].map(\n    (name) => {\n      return [name, new RegExp(`^${name}(-\\\\w+)?$`)] as const;\n    },\n  ),\n\n  // Key + single word value\n  ...[\n    'button',\n    'contain',\n    'container',\n    'items',\n    'justify',\n    'link',\n    'overflow-x',\n    'overflow-y',\n    'overflow',\n    'self',\n    'transition',\n  ].map((name) => {\n    return [name, new RegExp(`^${name}-\\\\w+$`)] as const;\n  }),\n\n  // Key + multiple word value\n  ...['bg', 'whitespace'].map((name) => {\n    return [name, new RegExp(`^${name}-[\\\\w-]+$`)] as const;\n  }),\n\n  // Key + alphanumeric value with optional - prefix\n  ...[\n    'p',\n    'pt',\n    'pr',\n    'pb',\n    'pl',\n    'px',\n    'py',\n    'm',\n    'mt',\n    'mr',\n    'mb',\n    'ml',\n    'mx',\n    'my',\n    'gap',\n    'gap-y',\n    'gap-x',\n    'translate-x',\n    'translate-y',\n  ].map((name) => {\n    return [name, new RegExp(`^-?${name}-[\\\\w\\\\d\\\\/]+$`)] as const;\n  }),\n\n  ['border-color', /^border-(?!(ring|[tlrb]))[\\w-]{2,}$/],\n  ['flex', /^flex(-col|-row)(-reverse)?$/],\n  ['snap-align', /^snap-(start|center|end)$/],\n  ['snap-dir', /^snap-[xy]$/],\n  ['flex-wrap', /^flex-(no)?wrap$/],\n  ['display-outer', /^(inline|block|hidden)$/],\n  ['display-inner', /^(flex|grid|flow-root)$/],\n  ['grow', /^flex-grow(-\\\\d)?$/],\n  ['shrink', /^flex-shrink(-\\\\d)?$/],\n  ['weight', /^font-(light|medium)$/],\n  ['size', /^((heading|title|body|statement)-[\\w\\d]+|micro|font-\\d+)$/],\n  ['text-color', /^text-(?!start|center|end|balance)[\\w-]+$/],\n  ['aspect', /^aspect-\\d+\\/\\d+/],\n  ['position', /^(absolute|fixed|relative|static|sticky)$/],\n  [\n    'text-align',\n    // Needs explicit regexp to avoid matching text-color or text-wrap\n    /^text-(start|center|end)$/,\n  ],\n]);\n\n// The keys are group names that override the group names in the values.\n// For example `p-0` overrides both `py-8` and `pr-8`.\nconst overridingGroups = new Map([\n  ['p', ['px', 'py', 'pt', 'pr', 'pb', 'pl']],\n  ['px', ['pr', 'pl']],\n  ['py', ['pt', 'pb']],\n  ['m', ['mx', 'my', 'mt', 'mr', 'mb', 'ml']],\n  ['mx', ['mr', 'ml']],\n  ['my', ['mt', 'mb']],\n  ['gap', ['gap-x', 'gap-y']],\n  [\n    'border',\n    ['border-x', 'border-y', 'border-t', 'border-r', 'border-b', 'border-l'],\n  ],\n  ['border-x', ['border-l', 'border-r']],\n  ['border-y', ['border-t', 'border-b']],\n  ['rounded', ['rounded-t', 'rounded-e', 'rounded-b', 'rounded-s']],\n  ['overflow', ['overflow-x', 'overflow-y']],\n]);\n\n/**\n * Merges conflicting classes that apply to the same CSS property.\n * E.g. turns `px-8 p-0` into `p-0`.\n *\n * Classes are first passed through `cssJoin`.\n *\n * @param classes\n * @returns\n */\nexport function cssMerge(...classes: ClassValue[]): string {\n  const result = new Set<string>();\n  const includedGroups = new Map<string, RegExp>();\n  const unique = new Set(cssJoin(classes).split(SPLIT_CLASSES_REGEX).reverse());\n  outer: for (const className of unique) {\n    const [prefix, actualClass] = parseClassName(className);\n\n    // Skip classes that are already included\n    for (const [key, re] of includedGroups) {\n      const [includedPrefix] = parseClassName(key);\n      if (includedPrefix === prefix && re.test(actualClass)) {\n        continue outer;\n      }\n    }\n\n    for (const [group, re] of classGroupMatchers) {\n      if (re.test(actualClass)) {\n        includedGroups.set(prefix ? `${prefix}:${group}` : group, re);\n        for (const override of overridingGroups.get(group) ?? []) {\n          includedGroups.set(\n            prefix ? `${prefix}:${override}` : override,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            classGroupMatchers.get(override)!,\n          );\n        }\n      }\n    }\n    result.add(className);\n  }\n  return [...result].reverse().join(' ');\n}\n\nfunction parseClassName(\n  className: string,\n): [prefix: string, actualClassName: string] {\n  const parts = className.split(':');\n  return parts.length === 1 ? ['', parts[0]] : (parts as [string, string]);\n}\n"],"mappings":"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","names":["utils_exports","__export","clsx","cssJoin","cssMerge","__toCommonJS","toVal","mix","i","y","str","cssJoin","classes","x","SPLIT_CLASSES_REGEX","classGroupMatchers","name","overridingGroups","cssMerge","classes","result","includedGroups","unique","cssJoin","outer","className","prefix","actualClass","parseClassName","key","re","includedPrefix","group","override","parts","clsx","cssJoin"]}